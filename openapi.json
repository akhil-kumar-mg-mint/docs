{
  "openapi": "3.0.0",
  "info": {
    "title": "Eximpe Payment Gateway API",
    "description": "API for payment processing and order management through Eximpe payment gateway",
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.eximpe.com",
      "description": "Payment Gateway Base URL"
    }
  ],
  "security": [
    {
      "clientAuth": [],
      "clientSecretAuth": []
    }
  ],
  "paths": {
    "/pg/orders/": {
      "post": {
        "summary": "Create Order",
        "tags": ["Orders"],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": [],
            "merchantAuth": []
          }
        ],
        "requestBody": {
          "description": "Order creation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              },
              "examples": {
                "Hosted Payment": {
                  "summary": "Hosted Payment",
                  "description": "Standard hosted payment flow",
                  "value": {
                    "amount": "2499.99",
                    "currency": "INR",
                    "reference_id": "ORD_2024_WH_001234",
                    "return_url": "https://electronicshub.com/payment/success",
                    "collection_mode": "hosted_payment",
                    "mop_type": "UPI",
                    "buyer": {
                      "name": "Priya Sharma",
                      "email": "priya.sharma@techcorp.in",
                      "phone": "+919876543210",
                      "address": {
                        "line_1": "403, Crystal Tower, Linking Road",
                        "line_2": "Near Metro Station",
                        "city": "Mumbai",
                        "state": "Maharashtra",
                        "postal_code": "400050"
                      }
                    },
                    "product": {
                      "name": "Sony WH-1000XM5 Wireless Headphones",
                      "description": "Premium noise-cancelling wireless headphones with 30-hour battery life",
                      "hs_code": "85183000",
                      "hs_code_description": "Headphones and earphones, whether or not combined with a microphone",
                      "type_of_goods": "goods"
                    },
                    "invoice": {
                      "number": "INV_WH_2024_0621",
                      "date": "2024-06-21"
                    }
                  }
                },
                "S2S UPI Intent": {
                  "summary": "UPI Intent (S2S)",
                  "description": "Server-to-server UPI intent flow",
                  "value": {
                    "amount": "24999.00",
                    "currency": "INR",
                    "reference_id": "ORD_2024_SP_005678",
                    "collection_mode": "s2s",
                    "mop_type": "UPI",
                    "upi_flow_type": "intent",
                    "upi_app_name": "google_pay",
                    "buyer": {
                      "name": "Rajesh Kumar",
                      "email": "rajesh.kumar@innovatetech.com",
                      "phone": "+919123456789",
                      "address": {
                        "line_1": "B-204, Tech Park Complex, Sector 18",
                        "city": "New Delhi",
                        "state": "Delhi",
                        "postal_code": "110075"
                      }
                    },
                    "product": {
                      "name": "Samsung Galaxy S24 Ultra 5G",
                      "description": "Latest flagship Android smartphone with 512GB storage and S Pen",
                      "type_of_goods": "goods"
                    }
                  }
                },
                "S2S UPI Collection": {
                  "summary": "UPI Collection (S2S)",
                  "description": "Server-to-server UPI collection flow",
                  "value": {
                    "amount": "89999.00",
                    "currency": "INR",
                    "reference_id": "ORD_2024_LP_009012",
                    "collection_mode": "s2s",
                    "mop_type": "UPI",
                    "upi_flow_type": "collection",
                    "vpa": "aniket.verma@okaxis",
                    "buyer": {
                      "name": "Aniket Verma",
                      "email": "aniket.verma@digitalsolutions.co.in",
                      "phone": "+919876501234",
                      "address": {
                        "line_1": "301, Prestige Tech Park, Outer Ring Road",
                        "city": "Bangalore",
                        "state": "Karnataka",
                        "postal_code": "560037"
                      }
                    },
                    "product": {
                      "name": "ASUS ROG Strix G15 Gaming Laptop",
                      "description": "High-performance gaming laptop with RTX 4060, 16GB RAM, 1TB SSD",
                      "type_of_goods": "goods"
                    }
                  }
                },
                "S2S Card Payment": {
                  "summary": "Card Payment (S2S)",
                  "description": "Server-to-server card payment flow with 3D Secure authentication. For new cards, the system initiates 3D Secure verification and returns an ACS template that must be rendered on the client side to complete authentication. The card details are securely processed and can be tokenized using the Save Card API after successful payment.",
                  "value": {
                    "amount": "15750.00",
                    "currency": "INR",
                    "reference_id": "ORD_2024_TAB_456789",
                    "return_url": "https://gadgetstore.com/payment/callback/",
                    "collection_mode": "s2s",
                    "mop_type": "DEBIT_CARD",
                    "card_details": {
                      "nickname": "HDFC VISA Debit",
                      "number": "4895380110000003",
                      "cardholder_name": "Meera Patel",
                      "expiry_month": "05",
                      "expiry_year": "2030",
                      "cvv": "123",
                      "network": "VISA",
                      "identifier": "USER_MP_001"
                    },
                    "buyer": {
                      "name": "Meera Patel",
                      "email": "meera.patel@creativeagency.in",
                      "phone": "+919845612378",
                      "address": {
                        "line_1": "12/A, Shivaji Nagar Housing Society",
                        "line_2": "Near City Mall",
                        "city": "Pune",
                        "state": "Maharashtra",
                        "postal_code": "411005"
                      },
                      "ip_address": "103.25.142.87",
                      "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
                    },
                    "product": {
                      "name": "Apple iPad Air (5th Generation) Wi-Fi 64GB",
                      "description": "10.9-inch Liquid Retina display with True Tone, M1 chip, 12MP cameras",
                      "hs_code": "84713010",
                      "hs_code_description": "Portable automatic data processing machines weighing not more than 10 kg",
                      "type_of_goods": "goods"
                    },
                    "invoice": {
                      "number": "INV_TAB_2024_1204",
                      "date": "2024-12-04"
                    }
                  }
                },
                "S2S Card Payment (Saved Token)": {
                  "summary": "Card Payment with Saved Token (S2S)",
                  "description": "Server-to-server card payment using a previously saved card token. This provides faster checkout and enhanced security by avoiding transmission of sensitive card data.",
                  "value": {
                    "amount": "3799.00",
                    "currency": "INR",
                    "reference_id": "ORD_2024_WATCH_789012",
                    "return_url": "https://luxurywatches.com/checkout/success/",
                    "collection_mode": "s2s",
                    "mop_type": "CREDIT_CARD",
                    "card_details": {
                      "token": "1e6709282a21e83f43a020",
                      "identifier": "USER_AS_002",
                      "network": "VISA"
                    },
                    "buyer": {
                      "name": "Arjun Singh",
                      "email": "arjun.singh@financecorp.com",
                      "phone": "+919987654321",
                      "address": {
                        "line_1": "Tower B, 15th Floor, DLF Cyber City",
                        "line_2": "Phase 2, Sector 24",
                        "city": "Gurugram",
                        "state": "Haryana",
                        "postal_code": "122002"
                      },
                      "ip_address": "27.147.158.92",
                      "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
                    },
                    "product": {
                      "name": "Apple Watch Series 9 GPS + Cellular 45mm",
                      "description": "Starlight Aluminum Case with Sport Loop, Advanced health monitoring features",
                      "hs_code": "91021100",
                      "hs_code_description": "Wrist-watches, electrically operated, whether or not incorporating a stop-watch facility",
                      "type_of_goods": "goods"
                    },
                    "invoice": {
                      "number": "INV_WATCH_2024_1205",
                      "date": "2024-12-05"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResponse"
                },
                "examples": {
                  "Hosted Payment": {
                    "summary": "Hosted Payment",
                    "description": "Response for hosted payment mode",
                    "value": {
                      "success": true,
                      "message": "Checkout session created successfully",
                      "data": {
                        "session_id": "session_wh_5f8e3d7a9b2c1",
                        "order_id": "OD2024120456789"
                      }
                    }
                  },
                  "S2S UPI Intent": {
                    "summary": "UPI Intent (S2S)",
                    "description": "Response for S2S UPI Intent mode",
                    "value": {
                      "success": true,
                      "message": "S2S UPI Request created successfully",
                      "data": {
                        "intent_uri": "pa=rajesh.kumar@okaxis&pn=Rajesh%20Kumar&tr=624857392104738291&tid=EXIMPE624857392104738291120425184729&am=24999.00&cu=INR&tn=Samsung%20Galaxy%20S24%20Ultra%205G",
                        "order_id": "OD2024120567890"
                      }
                    }
                  },
                  "S2S UPI Collection": {
                    "summary": "UPI Collection (S2S)",
                    "description": "Response for S2S UPI Collection mode",
                    "value": {
                      "success": true,
                      "message": "S2S UPI Request created successfully",
                      "data": {
                        "order_id": "OD2024120789012",
                        "message": "UPI Collection request sent to aniket.verma@okaxis"
                      }
                    }
                  },
                  "S2S Card Payment": {
                    "summary": "Card Payment (S2S)",
                    "description": "Response for S2S Card Payment mode with 3D Secure authentication. The acs_template contains Base64-encoded HTML that must be decoded and rendered on the client side to complete the 3D Secure authentication process.",
                    "value": {
                      "success": true,
                      "message": "S2S Card Payment Request created successfully",
                      "data": {
                        "order_id": "OD2024120890123",
                        "acs_template": "PGh0bWw+PGJvZHk+PGZvcm0gbmFtZT0icGF5bWVudF9wb3N0IiBpZD0icGF5bWVudF9wb3N0IiBhY3Rpb249Imh0dHBzOi8vdGVzdC5wYXl1LmluL2UxMGMzNmExYWQ2YTQ1OTkzMWNhODYzNTBhZjIxZDU0ZDhiMTZhODRjYWQ1NDAxMDE2OGFlN2RjYmEwMmEwYWEvdGhyZWVEU2VjdXJlL21ldGhvZCIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJQYVJlcSIgdmFsdWU9ImVkZTFmODA0MzBiMzgzYmY0OGZjNjRmZGMxNjE5YzM2YTlkYzVjM2NjMGI5YjQ4NDZkMDU5MTY2ZGUzMmM1MTQ1NDdhMGNiMmM5MTBhMmM4ZTFlY2E3ZTI1NzAxZWNiMzdhOGFjMGZiZjNjYTEwYjE2OTVhZGRjZGEwMGJlYmVjZjY4NGZmNzliYmM4ZjYxM2YyODUxMWIxNDljNmEwZTgxOTc0N2RiZTRlMDVhMjRhOTMyYWMyNzljMzA5ZTI4NzczNzU0YmUwY2I4ZTUzZDU5ZWUxOTY0OTAxNWM1NzZlMTQ2ODZlMmU5NjI5YzkyZDI3MmM1YjI0ZTIwNjE0OTgwOTk3ODk1NTAzMDM2YjkwZGUwZjNiNTkxZDEzMjczNTZkMTczMTI4OWMwNjY1NTEzYjVlMDYxYThmYmJjYTRhMjk0YmJjYzYyZWFiMzMwMmNmZGMwOGVhNTA2ZTA0NDg0YWE0NDNiNDBiNWQ2MWFiOTFhODViMDliNDRmMTE4N2M2OWRiNTE3ZTkwMDYwNjhhMjhjMzFiM2Y5MDEyYmNlMDg3MzcwZmE2ODBiNzdmNTlhNGQ4N2ZkMDViODRmNzk3ZjVlOTVhOTk4YTMxZjRjOTZkNTRhMzQyNDg3MTYxMDU5NWRmMGRkNGQ4YmE1YjExYTJmODMwYzFmOTM2NjRlN2Q3MTJlYjA4MTZhMTY2NzRhNTgxYTlkZDkwMGNjMDk0ZjZiYmE0OTRjZTk3MTNhNmU3MDI1NWEzNmJhNzg0MDlmMjEzN2Q1M2U0MTM5ZmU5ZjVlNDc4ZTEyMjAxNmUwMTAzNzQxYWIxNzBjZmUwMmUwMDQxNzkxZmM1NzhhMDQ0MDdhYmQ5NjUyNmFmMjMyMjg0MDhlOTJjNTcyNTg5ZTQ5ZThjMGYzZjhjYjNmNzk5MmFjNjg2NDExNmYyZTQ3NjQ4MGEzMjdlMzI0OWMyMzAzZmMxYjAzY2U3MWYyZTJmZGZjZmExYjg2OTYwOTRlMDk3ZTVhYWM1YTlhOTVjNTU5ZDRiNmY5NzNlOTI5NmY1Y2ZhNmY5NDJlMDNlMjUxN2QzNzlmNjkyMmU0NzQyYjliYmZjODgzYTVlMTc1YTE5YmMyNzQ1ZGI5Mzk5YTNjZGJhMTljMmM0Njc2NTE4NjgzNzYyZWM3MTUxOTQ2YjJhZTE1MzA2MDQ0YzhmMmVkNmVmOGU0YzNlZmU2M2Y0ZWFlNTY2N2IxNzRiMjcxOTA1YjQzOWRlYzMwMzQ4MGJmZDIwODE4MTZiMDgwMTk2ZjBmZmZiNThkMTA3Y2IxMDI1YjZlMmNjMDBmMzc5MjhkM2JkNjZhN2MxZmRkZDRjZDkwMDU0NDc5NTlmNDFkNThlMDFiZmY1YThhYjk0MjFlMzU5ZDY2ZTkwNzQyYTFlZTFjNzgyNzNhYmM5Y2RmZTljMDdhZDU4OTdkNTA3MjQ2MzFjNDZkODQ0MDhjMjNhOTc5NzBkMGFiYWZlZTBhMjllYjhiMThhNzU5ODMyM2EzMWU4MmQ2Y2IxZmRmNzhmMTQzMDBjOTA5YzhmYjA0YjNhMjNhOTYyYTBmMTA2ZjdhOTE5MTcwMWJlN2M1MDRjNmFhYmFjNjZhMmMyMTM2ZjNmMWE2N2U2MmIyY2Y4ZGNhYTc0MTFiYjczMTVkY2UzMiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iTUQiIHZhbHVlPSJlMTBjMzZhMWFkNmE0NTk5MzFjYTg2MzUwYWYyMWQ1NDNiNDIxOGU0N2U1ZWU3MDI3M2I4NzdkMjFkYTE0MTNlIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJUZXJtVXJsIiB2YWx1ZT0iaHR0cHM6Ly90ZXN0LnBheXUuaW4vZTEwYzM2YTFhZDZhNDU5OTMxY2E4NjM1MGFmMjFkNTRkOGIxNmE4NGNhZDU0MDEwMTY4YWU3ZGNiYTAyYTBhYS9Db21tb25QZ1Jlc3BvbnNlSGFuZGxlciI+PC9mb3JtPjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbmxvYWQ9ZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5mb3Jtc1sncGF5bWVudF9wb3N0J10uc3VibWl0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PjwvYm9keT48L2h0bWw+"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Reference ID must be unique Error": {
                    "value": {
                      "success": false,
                      "error": {
                        "code": "ERR_ORDER_002",
                        "message": "Validation error",
                        "details": {
                          "reference_id": "Reference ID must be unique"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Missing credentials": {
                    "value": {
                      "success": false,
                      "error": {
                        "code": "ERR_AUTH_000",
                        "message": "Missing credentials",
                        "details": {
                          "authentication": "Missing credentials."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pg/orders/{order_id}": {
      "patch": {
        "summary": "Update Order",
        "description": "Update specific fields of an existing order.",
        "tags": ["Orders"],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Unique identifier of the order",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "OD3451762252"
          }
        ],
        "requestBody": {
          "description": "Order update request - only include fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderRequest"
              },
              "example": {
                "buyer": {
                  "pan_number": "CDEFG1234H",
                  "dob": "1992-08-14"
                },
                "invoice": {
                  "number": "INV_UPDATED_2024_1205",
                  "date": "2024-12-05"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrderResponse"
                },
                "example": {
                  "success": true,
                  "message": "Order updated successfully",
                  "data": {
                    "success": true,
                    "message": "Order updated successfully",
                    "data": {
                      "order_id": "{Order_ID}",
                      "buyer": {
                                          "pan_number": "CDEFG1234H",
                  "dob": "1992-08-14"
                      },
                      "invoice": {
                                          "number": "INV_UPDATED_2024_1205",
                  "date": "2024-12-05"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "message": "Order not found",
                  "error": {
                    "code": "ERR_ORDER_404",
                    "message": "Order with ID 'OD3451762252' not found"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get Order",
        "description": "Retrieve order details by order ID.",
        "tags": ["Orders"],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Unique identifier of the order",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "OD3451762252"
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                },
                "example": {
                  "success": true,
                  "message": "Order fetched successfully",
                  "data": {
                    "order_id": "OD2024120934567",
                    "reference_id": "ORD_BOOKS_2024_3QWD98",
                    "amount": "1899.00",
                    "currency": "INR",
                    "mop_type": "UPI",
                    "buyer": {
                      "name": "Vikash Gupta",
                      "email": "vikash.gupta@edupublishers.com",
                      "phone": "+919456789012",
                      "address": {
                        "line_1": "C-45, Sector 62, Institutional Area",
                        "line_2": "Near Metro Station",
                        "city": "Noida",
                        "state": "Uttar Pradesh",
                        "postal_code": "201309"
                      },
                      "pan_number": "ABCPV1234G",
                      "dob": "1987-03-15"
                    },
                    "product": {
                      "name": "Complete Python Programming Course Bundle",
                      "description": "Comprehensive online course with 50+ hours of content, projects, and certification",
                      "hs_code": "49019900",
                      "hs_code_description": "Printed books, brochures, leaflets and similar printed matter",
                      "type_of_goods": "services"
                    },
                    "invoice": {
                      "number": "INV_EDU_20241205",
                      "date": "2024-12-05",
                      "file": "https://eximpe-private-production-storage.s3.amazonaws.com/customer_7235050248/domestic_collection/invoice_files/2345_1_FfX8ZYL.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAU7HUSFL56WCKDV5R%2F20250904%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Date=20250904T093521Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEPD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCmFwLXNvdXRoLTEiSDBGAiEAsG%2FvfQFJNeDKY0LiTMFnLts8TN9n2ttxmu62wYWnORwCIQD6NOAmZAuOtqjgF%2BAbLO9IgeWRqBgYU14yTQA%2BOZu79SqQBAhZEAAaDDM0MTk2Mjc5NTc3MSIMRwrignU2m5I9wa%2BBKu0DXTql14MdcbRpHAybF8lsmDA1FSdwkeWdyV9vvkg92p8gaQ%2BPqDC6qJjDuU3QNKWlj1PFNp1tA37xb4Ks90FpVCTzxVSb0p1hiGtBFNDyHnabzp6L%2FfxA6fLBSyjcBRl24exdW0FB9TvV0fD35UnZFwXaob6ltQEHuZYOuraeOJ3J%2F4MjtigXDjWxWZ8KDQUm%2F5nl8S4zjrcYHfMryGEVkn%2Fja%2B%2FM1jua8beJL1Hcs0x2AZq6G6hLDL7nSjfRgG4renC1fHZYTHEUF2llYD%2FPKWSbTh%2Bgw6a81LmtZOGAanrG54tSbxy6LoMEZNLJhtxBKQdx6yS%2FGcbNzhVrH8YCQ5twZNa83%2B%2B9yUqkudjCeaZxJ%2Buuvoyvm13lvKhjfBpTtSZbdb5aq5IoQ7tt6XrP8lZnK9WLeIZ9RX9tcYOfKYuLpJGD9Eh%2FYooTYPl8faljhLiQo4U0qNrZ4MOFjCadalt6g73Lgz9I8fFe%2BiVZl6Fw6K6sGffJVEw296U8lMTlp7yd92gIrOBgWbQJe8TvWVdAPrQhbu6DOviW9pZ3%2Fc7nWJh6uu1hLCY2mWnbDcttU0IJTXxSbYWoKAu%2FlcanpRqzRKbuzqUmaursniJVXDA8HU85rbYDAxUHKxWXoc2g7nx2wLuVggpoMZjUFDCUleXFBjqlAQC3CvrvfNJL0aJm9e9ampx5%2B%2BGs6Oc2gQgR%2BB%2BeYH0pVbj%2Fol1Xe8b0N1Gml0Py0tXOVdUcoe4DRot1BF3%2BoCy9wRDrdB9PTHPnzRMGrXwi4lh%2FKZfubn%2Fhee9aawZ02KX1KxZ9zNZBtIX2FrkdVliwHhjvmlhUiueWBwMbsX9WFb9Q2G3aiqpRbSs2g9LPP03wTpeGxwo9B1quxFb08JGTvY33WA%3D%3D&X-Amz-Signature=9e66e0cf971a44f9a82e329ba659839354090a51c87efd4649b4bdb92a8d313c"
                    },
                    "air_waybills": [
                      {
                        "number": "AWB23498234",
                        "file": "https://eximpe-private-production-storage.s3.amazonaws.com/merchant_7235050248/domestic_collection/awb_files/2345_1.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAU7HUSFL56WCKDV5R%2F20250904%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Date=20250904T093521Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEPD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCmFwLXNvdXRoLTEiSDBGAiEAsG%2FvfQFJNeDKY0LiTMFnLts8TN9n2ttxmu62wYWnORwCIQD6NOAmZAuOtqjgF%2BAbLO9IgeWRqBgYU14yTQA%2BOZu79SqQBAhZEAAaDDM0MTk2Mjc5NTc3MSIMRwrignU2m5I9wa%2BBKu0DXTql14MdcbRpHAybF8lsmDA1FSdwkeWdyV9vvkg92p8gaQ%2BPqDC6qJjDuU3QNKWlj1PFNp1tA37xb4Ks90FpVCTzxVSb0p1hiGtBFNDyHnabzp6L%2FfxA6fLBSyjcBRl24exdW0FB9TvV0fD35UnZFwXaob6ltQEHuZYOuraeOJ3J%2F4MjtigXDjWxWZ8KDQUm%2F5nl8S4zjrcYHfMryGEVkn%2Fja%2B%2FM1jua8beJL1Hcs0x2AZq6G6hLDL7nSjfRgG4renC1fHZYTHEUF2llYD%2FPKWSbTh%2Bgw6a81LmtZOGAanrG54tSbxy6LoMEZNLJhtxBKQdx6yS%2FGcbNzhVrH8YCQ5twZNa83%2B%2B9yUqkudjCeaZxJ%2Buuvoyvm13lvKhjfBpTtSZbdb5aq5IoQ7tt6XrP8lZnK9WLeIZ9RX9tcYOfKYuLpJGD9Eh%2FYooTYPl8faljhLiQo4U0qNrZ4MOFjCadalt6g73Lgz9I8fFe%2BiVZl6Fw6K6sGffJVEw296U8lMTlp7yd92gIrOBgWbQJe8TvWVdAPrQhbu6DOviW9pZ3%2Fc7nWJh6uu1hLCY2mWnbDcttU0IJTXxSbYWoKAu%2FlcanpRqzRKbuzqUmaursniJVXDA8HU85rbYDAxUHKxWXoc2g7nx2wLuVggpoMZjUFDCUleXFBjqlAQC3CvrvfNJL0aJm9e9ampx5%2B%2BGs6Oc2gQgR%2BB%2BeYH0pVbj%2Fol1Xe8b0N1Gml0Py0tXOVdUcoe4DRot1BF3%2BoCy9wRDrdB9PTHPnzRMGrXwi4lh%2FKZfubn%2Fhee9aawZ02KX1KxZ9zNZBtIX2FrkdVliwHhjvmlhUiueWBwMbsX9WFb9Q2G3aiqpRbSs2g9LPP03wTpeGxwo9B1quxFb08JGTvY33WA%3D%3D&X-Amz-Signature=ab46a77c1aa9a42693b9abf6c7de4bbc80c5ab557b5fee6062430fc5b627816f"
                      }
                    ],
                    "payments": [
                      {
                        "payment_id": "PR3932678387",
                        "mop_type": "UPI",
                        "status": "captured",
                        "status_message": null,
                        "settlement": {
                          "status": "ready_for_settlement",
                          "message": null,
                          "settlement_details": {
                            "settlement_id": "ST8865592169",
                            "settlement_completed_at": "2025-08-20T20:30:00.212494Z",
                            "settlement_currency": "USD",
                            "transaction_amount": "1000.00",
                            "merchant_service_fee": "20.00",
                            "merchant_service_tax": "3.60",
                            "merchant_net_amount": "976.40",
                            "sgst": "0.00",
                            "cgst": "0.00",
                            "igst": "0.00",
                            "merchant_transaction_id": "OD8967030165-PR3932678387",
                            "card_type": "domestic",
                            "offer_service_fee": "0.00",
                            "offer_service_tax": "0.00",
                            "forex_rate": "86",
                            "discount": "0.00",
                            "additional_tdr_fee": "0.00",
                            "additional_tdr_tax": "0.00",
                            "total_processing_fee": "0.00",
                            "total_service_tax": "0.00",
                            "transaction_currency": "INR"
                          }
                        },
                        "created_at": "2025-08-20T06:13:30.033816Z"
                      }
                    ],
                    "status": "payment_successful",
                    "status_message": "Payment captured successfully",
                    "created_at": "2025-08-20T06:13:29.988329Z"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "message": "Order not found",
                  "error": {
                    "code": "ERR_ORDER_404",
                    "message": "Order with ID 'OD3451762252' not found"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pg/orders/{order_id}/documents/": {
      "post": {
        "summary": "Upload Document",
        "description": "Upload an invoice or other document for an existing order.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Unique identifier of the order",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "OD3451762252"
          }
        ],
        "requestBody": {
          "description": "Document upload request. The body must be `multipart/form-data`.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadDocumentRequest"
              },
              "examples": {
                "invoiceUpload": {
                  "summary": "Invoice Upload Example",
                  "value": {
                    "identifier": "INV_EDU_20241205",
                    "document_type": "invoice",
                    "file": "python_course_invoice_2024.pdf"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadDocumentResponse"
                },
                "example": {
                  "success": true,
                  "message": "Documents uploaded successfully",
                  "data": {
                    "order_id": "OD9411897512",
                    "reference_id": "TEST_FOB46D",
                    "amount": 1000.0,
                    "currency": "INR",
                    "mop_type": "UPI",
                    "buyer": {
                      "name": "Vikash Gupta",
                      "email": "vikash.gupta@edupublishers.com",
                      "phone": "+919456789012",
                      "address": {
                        "line_1": "C-45, Sector 62, Institutional Area",
                        "line_2": "Near Metro Station",
                        "city": "Noida",
                        "state": "Uttar Pradesh",
                        "postal_code": "201309"
                      },
                      "pan_number": "ABCPV1234G",
                      "dob": "1987-03-15"
                    },
                    "product": {
                      "name": "Complete Python Programming Course Bundle",
                      "description": "Comprehensive online course with 50+ hours of content, projects, and certification",
                      "hs_code": "49019900",
                      "hs_code_description": "Printed books, brochures, leaflets and similar printed matter",
                      "type_of_goods": "services"
                    },
                    "invoice": {
                      "number": "IN1123213",
                      "date": "2025-06-22",
                      "file": "https://eximpe.com/inv-12312312.pdf"
                    },
                    "air_waybills": [
                      {
                        "number": "AWB-23343",
                        "file": "https://eximpe.com/awb-8F3F51D2.pdf"
                      }
                    ],
                    "payments": [
                      {
                        "payment_id": "PR1469384681",
                        "mop_type": "UPI",
                        "status": "captured",
                        "status_message": null,
                        "settlement": {
                          "status": "ready_for_settlement",
                          "message": null,
                          "settlement_details": null
                        },
                        "created_at": "2025-06-23T10:44:14.344135Z"
                      }
                    ],
                    "status": "payment_successful",
                    "status_message": "Payment captured successfully",
                    "created_at": "2025-06-23T10:44:11.702363Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pg/payments/": {
      "get": {
        "summary": "List Payments",
        "description": "Retrieve a list of payments with optional filtering.",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Filter by 3-letter ISO currency code.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchant_id",
            "in": "query",
            "description": "Filter by merchant ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_id",
            "in": "query",
            "description": "Filter by payment ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference_id",
            "in": "query",
            "description": "Filter by order reference ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "buyer_name",
            "in": "query",
            "description": "Filter by buyer's name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mop_type",
            "in": "query",
            "description": "Filter by payment mode.",
            "schema": {
              "type": "string",
              "enum": [
                "UPI",
                "CREDIT_CARD",
                "DEBIT_CARD",
                "NET_BANKING",
                "QR"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by payment status.",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "CAPTURED",
                "FAILED"
              ]
            }
          },
          {
            "name": "from_created_date",
            "in": "query",
            "description": "Filter by creation date (from).",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to_created_date",
            "in": "query",
            "description": "Filter by creation date (to).",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of payments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPaymentsResponse"
                },
                "example": {
                  "success": true,
                  "message": "Domestic payment requests retrieved successfully",
                  "data": {
                    "count": 15,
                    "page": 1,
                    "page_size": 10,
                    "next": "https://api.eximpe.com/pg/payments/?page=2&page_size=10",
                    "previous": null,
                    "results": [
                      {
                        "id": "PR2024120567891",
                        "merchant": {
                          "id": "3604346598",
                          "name": "InnovateTech Solutions"
                        },
                        "reference_id": "ORD_IT_SERVICES_2024_1001",
                        "buyer": {
                          "name": "Kavya Nair",
                          "email": "kavya.nair@startupventures.in",
                          "phone": "+919876543201"
                        },
                        "payment_id": "OD2024120567891",
                        "amount": {
                          "amount": "45000",
                          "total_amount": "45000",
                          "currency": "INR"
                        },
                        "created_at": "2024-12-05T15:22:18.344135Z",
                        "comment": null,
                        "mop_type": "UPI",
                        "status": "CAPTURED"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pg/payments/{payment_id}/": {
      "get": {
        "summary": "Get Payment",
        "description": "Retrieve the details of a specific payment by its ID.",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The ID of the payment to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentResponse"
                },
                "example": {
                  "success": true,
                  "message": "Domestic payment request details retrieved successfully",
                  "data": {
                    "payment_id": "PR2099558561",
                    "order": {
                      "order_id": "OD2024120678912",
                      "reference_id": "ORD_CONSULTING_2024_RC0YKG",
                      "amount": "12500.00",
                      "currency": "INR",
                      "mop_type": "UPI",
                      "buyer": {
                        "name": "Amit Khanna",
                        "email": "amit.khanna@consultingfirm.co.in",
                        "phone": "+919123456780",
                        "address": {
                          "line_1": "701, Business Square, Netaji Subhash Place",
                          "line_2": "Near Pitampura Metro",
                          "city": "New Delhi",
                          "state": "Delhi",
                          "postal_code": "110034"
                        },
                        "pan_number": "CDEPK9876L",
                        "dob": "1985-11-28"
                      },
                      "product": {
                        "name": "Digital Marketing Strategy Consultation",
                        "description": "Comprehensive 3-month digital marketing strategy and implementation consultation",
                        "hs_code": "99831000",
                        "hs_code_description": "Professional, technical and other services",
                        "type_of_goods": "services"
                      },
                      "status": "payment_successful",
                      "status_message": "Payment captured successfully",
                      "created_at": "2025-09-04T09:38:39.819054Z"
                    },
                    "settlement": {
                      "id": "ST6937597440",
                      "settlement_id": "67c41a7a-010a-4667-82f2-fb529cdcdbe6",
                      "settlement_completed_at": "2025-09-04T09:40:58.189094Z",
                      "settlement_amount": "976.40",
                      "settlement_currency": "USD",
                      "utr_number": "cea2ae3a-182c-457a-aa57-fa425000cfb8",
                      "number_of_transactions": 1,
                      "created_date": "2025-09-04T09:40:58.199249Z"
                    },
                    "refund": [],
                    "collection_mode": "HOSTED_PAYMENT",
                    "mop_type": "UPI",
                    "bank_ref_num": "OD1729756084-PR2099558561",
                    "mop_detail": {
                      "vpa": "buyer@payu"
                    },
                    "payment_completed_at": "2025-09-04T09:38:44.000000Z",
                    "status": "captured",
                    "status_message": null,
                    "created_date": "2025-09-04T09:38:43.422672Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pg/refunds": {
      "post": {
        "summary": "Create Refund",
        "description": "Create a new refund for a previously successful payment.",
        "tags": [
          "Refunds"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "requestBody": {
          "description": "Refund creation request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRefundRequest"
              },
              "example": {
                "payment_id": "PR2024120567891",
                "refund_amount": "2250.00"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refund created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefundResponse"
                },
                "example": {
                  "success": true,
                  "message": "Refund request processed successfully",
                  "data": {
                    "refund_id": "RF5622596094",
                    "payment_id": "PR2099558561",
                    "refund_status": "initiated",
                    "message": "Refund Request Queued",
                    "transaction_id": "138605980",
                    "bank_ref_num": null,
                    "refund_amount": "1000"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Refunds",
        "description": "Retrieve a list of refunds with optional filtering.",
        "tags": [
          "Refunds"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "query",
            "description": "Filter by payment ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference_id",
            "in": "query",
            "description": "Filter by order reference ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "description": "Filter refunds created from this date. Format: YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "description": "Filter refunds created up to this date. Format: YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "merchant_id",
            "in": "query",
            "description": "Filter refunds by merchant ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of refunds.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRefundsResponse"
                },
                "example": {
                  "count": 4,
                  "page": 1,
                  "page_size": 250,
                  "next": null,
                  "previous": null,
                  "results": [
                    {
                      "refund_id": "RF8380989720",
                      "refund_amount": 11,
                      "refund_status": "INITIATED",
                      "refunded_at": null,
                      "message": "Refund Request Queued",
                      "payment_id": "PR8867819681"
                    },
                    {
                      "refund_id": "RF8370660295",
                      "refund_amount": 12,
                      "refund_status": "INITIATED",
                      "refunded_at": null,
                      "message": "No action status found",
                      "payment_id": "PR3828502708"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/pg/refunds/{refund_id}": {
      "get": {
        "summary": "Get Refund",
        "description": "Retrieve the details of a specific refund by its ID.",
        "tags": [
          "Refunds"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "description": "The ID of the refund to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the refund.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefundResponse"
                },
                "example": {
                  "success": true,
                  "message": "Refund details retrieved successfully",
                  "data": {
                    "refund_id": "RF1481534012",
                    "refund_amount": 12,
                    "refund_status": "INITIATED",
                    "refunded_at": null,
                    "message": "No action status found",
                    "payment_id": "PR3828502708"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Refund not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "message": "Refund not found",
                  "error": {
                    "code": "ERR_REFUND_404",
                    "message": "Refund with ID 'RF1481534012' not found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pg/settlements": {
      "get": {
        "summary": "List Settlements",
        "description": "Retrieve a list of settlements with optional filtering.",
        "tags": [
          "Settlements"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "from_date",
            "in": "query",
            "description": "Filter settlements from this date. Format: YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "description": "Filter settlements up to this date. Format: YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of settlements.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSettlementsResponse"
                },
                "example": {
                  "success": true,
                  "message": "Settlements fetched successfully",
                  "data": {
                    "settlement_id": "ST4353980017",
                    "utr_number": "092dc30a-4f19-4318-9798-ad08b48801f6",
                    "settlement_completed_date": "2025-06-20T08:06:59.293548Z",
                    "forex_rate_cents": 8600,
                    "settlement_amount_cents": 100000,
                    "settlement_currency": "USD",
                    "transactions": [
                      {
                        "settlement_type": "capture",
                        "transaction_id": "PR3828502708",
                        "transaction_amount": 1000.0,
                        "merchant_service_fee": 0.0,
                        "merchant_service_tax": 0.0,
                        "merchant_net_amount": 1000.0,
                        "mop_type": "UPI",
                        "transaction_currency": "INR",
                        "forex_rate": 86.0
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pg/settlements/{settlement_id}": {
      "get": {
        "summary": "Get Settlement",
        "description": "Retrieve the details of a specific settlement by its ID.",
        "tags": [
          "Settlements"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "settlement_id",
            "in": "path",
            "description": "The ID of the settlement to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the settlement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSettlementResponse"
                },
                "example": {
                  "success": true,
                  "message": "Settlements fetched successfully",
                  "data": {
                    "settlement_id": "ST4353980017",
                    "utr_number": "092dc30a-4f19-4318-9798-ad08b48801f6",
                    "settlement_completed_date": "2025-06-20T08:06:59.293548Z",
                    "forex_rate_cents": 8600,
                    "settlement_amount_cents": 100000,
                    "settlement_currency": "USD",
                    "transactions": [
                      {
                        "settlement_type": "capture",
                        "transaction_id": "PR3828502708",
                        "transaction_amount": 1000.0,
                        "merchant_service_fee": 0.0,
                        "merchant_service_tax": 0.0,
                        "merchant_net_amount": 1000.0,
                        "mop_type": "UPI",
                        "transaction_currency": "INR",
                        "forex_rate": 86.0
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Settlement not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "message": "Settlement not found",
                  "error": {
                    "code": "ERR_SETTLEMENT_404",
                    "message": "Settlement with ID 'ST4353980017' not found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/partners/merchants/": {
      "get": {
        "summary": "List Merchants",
        "description": "Retrieve a list of merchants with pagination.",
        "tags": [
          "Merchants"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of merchants.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMerchantsResponse"
                },
                "example": {
                  "success": true,
                  "message": "Sub-merchants retrieved successfully",
                  "data": {
                    "count": 4,
                    "page": 1,
                    "page_size": 250,
                    "next": null,
                    "previous": null,
                    "results": [
                      {
                        "id": "3604346598",
                        "brand_name": "InnovateTech Solutions",
                        "kyc_status": "APPROVED",
                        "created_date": "2024-11-19T18:06:05.523720Z"
                      },
                      {
                        "id": "8319446548",
                        "brand_name": "DigitalCraft Enterprises",
                        "kyc_status": "PENDING",
                        "created_date": "2024-11-19T17:43:25.467834Z"
                      },
                      {
                        "id": "2343915596",
                        "brand_name": "CloudSync Technologies",
                        "kyc_status": "APPROVED",
                        "created_date": "2024-11-19T16:43:53.317062Z"
                      },
                      {
                        "id": "4455704961",
                        "brand_name": "NextGen Software Ltd",
                        "kyc_status": "PENDING",
                        "created_date": "2024-11-19T08:53:22.411374Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Merchant",
        "description": "Create a new merchant with settlement and company details.",
        "tags": [
          "Merchants"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "requestBody": {
          "description": "Merchant details to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantRequest"
              },
              "example": {
                "settlement_details": {
                  "bank_account_number": "6789123450987654",
                  "bank_account_name": "InnovateTech Solutions Private Limited",
                  "bank_swift_code": "CHASINUS33XXX",
                  "bank_name": "JPMorgan Chase Bank",
                  "bank_branch_name": "Financial District Branch",
                  "bank_address": "270 Park Avenue, New York",
                  "bank_city": "New York",
                  "bank_state": "NY",
                  "bank_country": "United States",
                  "bank_pincode": "10017",
                  "routing_number": "021000021"
                },
                "company_details": {
                  "legal_name": "InnovateTech Solutions Private Limited",
                  "brand_name": "InnovateTech",
                  "registration_number": "US-CORP-2024-IT789456",
                  "international_org_type": "PRIVATE_LIMITED",
                  "tax_id": "94-8765432",
                  "website": "https://www.innovatetech.com",
                  "monthly_avg_transaction_value": "275000.00",
                  "monthly_avg_transaction_volume": "485",
                  "communication_address": "Suite 1200, 101 California Street",
                  "communication_city": "San Francisco",
                  "communication_state": "CA",
                  "communication_country": "United States",
                  "communication_pincode": "94111",
                  "same_as_registered_address": false,
                  "registered_address": "1455 Market Street, Suite 1600",
                  "registered_city": "San Francisco",
                  "registered_state": "CA",
                  "registered_country": "United States",
                  "registered_pincode": "94103",
                  "business_category": "TECHNOLOGY",
                  "business_mode": "B2B",
                  "commodity": "Cloud Computing and AI Solutions",
                  "payment_terms": "NET_30",
                  "hs_codes": [
                    "85234910",
                    "84715000"
                  ],
                  "category": "Enterprise Software and Cloud Services",
                  "description_of_products_and_services": "InnovateTech provides cutting-edge cloud computing solutions, artificial intelligence platforms, and enterprise software systems. We specialize in machine learning algorithms, data analytics, and scalable cloud infrastructure for Fortune 500 companies.",
                  "agreement_details": "Master Service Agreement for Cloud Solutions dated 2024-03-15",
                  "purpose_code": "P0101"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Merchant created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMerchantResponse"
                },
                "example": {
                  "success": true,
                  "message": "Sub-merchant created successfully",
                  "data": {
                    "id": "6182929449",
                    "settlement_details": {
                      "bank_account_number": "9876543210",
                      "bank_account_name": "GlobalTech Solutions Inc.",
                      "bank_swift_code": "CHASUS33XXX",
                      "bank_name": "JPMorgan Chase Bank",
                      "bank_branch_name": "Corporate Banking Division",
                      "bank_address": "270 Park Avenue",
                      "bank_city": "New York",
                      "bank_state": "NY",
                      "bank_country": "United States",
                      "bank_pincode": "10017",
                      "routing_number": "021000021",
                      "settlement_currency": "USD"
                    },
                    "created_at": "2025-01-15T10:30:00.000000Z",
                    "updated_at": "2025-01-15T10:30:00.000000Z",
                    "invoice_file": null,
                    "company_details": {
                      "legal_name": "GlobalTech Solutions Inc.",
                      "brand_name": "GlobalTech",
                      "registration_number": "US-CORP-99887766",
                      "international_org_type": "PRIVATE_LIMITED",
                      "tax_id": "94-1234567",
                      "website": "https://www.globaltech.io",
                      "monthly_avg_transaction_value": "150000.00",
                      "monthly_avg_transaction_volume": "300",
                      "communication_address": "500 Mission Street, Suite 2400",
                      "communication_city": "San Francisco",
                      "communication_state": "CA",
                      "communication_country": "United States",
                      "communication_pincode": "94105",
                      "same_as_registered_address": false,
                      "registered_address": "1600 Amphitheatre Parkway",
                      "registered_city": "Mountain View",
                      "registered_state": "CA",
                      "registered_country": "United States",
                      "registered_pincode": "94043",
                      "business_category": "TECHNOLOGY",
                      "business_mode": "B2B",
                      "commodity": "Enterprise Software Solutions",
                      "payment_terms": "NET_30",
                      "hs_codes": [
                        "85234910",
                        "84715000"
                      ],
                      "category": "Enterprise SaaS",
                      "description_of_products_and_services": "GlobalTech provides cloud-native enterprise software, including AI-powered analytics platforms, CRM solutions, and infrastructure automation tools. We enable digital transformation for Fortune 500 companies through scalable and secure software systems.",
                      "agreement_details": "Master Service Agreement dated 2024-01-10 with Global Clients",
                      "purpose_code": "P0101"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/partners/merchants/{merchant_id}/": {
      "get": {
        "summary": "Get Merchant",
        "description": "Retrieve the details of a specific merchant by its ID.",
        "tags": ["Merchants"],
        "security": [
          { "clientAuth": [], "clientSecretAuth": [] }
        ],
        "parameters": [
          {
            "name": "merchant_id",
            "in": "path",
            "description": "The ID of the merchant to retrieve.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetMerchantResponse" },
                "example": {
                  "success": true,
                  "message": "Sub-merchant details retrieved successfully",
                  "data": {
                    "id": "3604346598",
                    "settlement_details": {
                      "bank_account_number": "9876543210123456",
                      "bank_account_name": "InnovateTech Solutions Private Limited",
                      "bank_swift_code": "CHASUS33XXX",
                      "bank_name": "JPMorgan Chase Bank",
                      "bank_branch_name": "Corporate Banking Division",
                      "bank_address": "270 Park Avenue",
                      "bank_city": "New York",
                      "bank_state": "NY",
                      "bank_country": "United States",
                      "bank_pincode": "10017",
                      "routing_number": "021000021",
                      "settlement_currency": "USD"
                    },
                    "created_at": "2025-06-19T18:06:05.523720Z",
                    "updated_at": "2025-06-19T18:06:05.523752Z",
                    "invoice_file": null,
                    "company_details": {
                      "legal_name": "InnovateTech Solutions Private Limited",
                      "brand_name": "InnovateTech Solutions",
                      "registration_number": "US-CORP-2024-IT789456",
                      "international_org_type": "PRIVATE_LIMITED",
                      "tax_id": "94-8765432",
                      "website": "https://www.innovatetech.com",
                      "monthly_avg_transaction_value": "50000.00",
                      "monthly_avg_transaction_volume": "100",
                      "communication_address": "123 Tech Street",
                      "communication_city": "San Francisco",
                      "communication_state": "CA",
                      "communication_country": "United States",
                      "communication_pincode": "94105",
                      "same_as_registered_address": true,
                      "registered_address": "123 Tech Street",
                      "registered_city": "San Francisco",
                      "registered_state": "CA",
                      "registered_country": "United States",
                      "registered_pincode": "94105",
                      "business_category": "TECHNOLOGY",
                      "business_mode": "B2B",
                      "commodity": "Software Services",
                      "payment_terms": "NET_30",
                      "hs_codes": [
                        "84713010",
                        "85423100"
                      ],
                      "category": "E-commerce",
                      "description_of_products_and_services": "We provide comprehensive IT solutions including software development, cloud migration, data analytics, and digital transformation services for enterprises. Our solutions help businesses streamline operations, improve efficiency, and accelerate digital adoption.",
                      "agreement_details": "global_company aggrement",
                      "purpose_code": "P0101"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Merchant not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Merchant",
        "description": "Update specific fields of an existing merchant.",
        "tags": ["Merchants"],
        "security": [
          { "clientAuth": [], "clientSecretAuth": [] }
        ],
        "parameters": [
          {
            "name": "merchant_id",
            "in": "path",
            "description": "The ID of the merchant to update.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Merchant update request - only include fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMerchantRequest"
              },
              "example": {
                "company_details": {
                  "legal_name": "Shakti Logistics & Exports Pvt Ltd",
                  "brand_name": "ShaktiXpress",
                  "registration_number": "IN09DEL2021PTC987654",
                  "international_org_type": "PRIVATE_LIMITED",
                  "tax_id": "29AABCT1234D1Z9",
                  "website": "https://www.shaktiexpress.in",
                  "monthly_avg_transaction_value": "780000.00",
                  "monthly_avg_transaction_volume": "120",
                  "business_category": "MANUFACTURING",
                  "business_mode": "B2B",
                  "commodity": "Textile Machinery and Automotive Components",
                  "payment_terms": "NET_30",
                  "category": "Logistics & Manufacturing Support",
                  "description_of_products_and_services": "ShaktiXpress provides export logistics and warehousing services for textile machinery and automotive components across Asia and Europe.",
                  "agreement_details": "Master Logistics Agreement valid until 2027-12-31",
                  "communication_address": "Plot No. 56, Electronic City Phase 1",
                  "communication_city": "Bengaluru",
                  "communication_state": "Karnataka",
                  "communication_country": "India",
                  "communication_pincode": "560100",
                  "same_as_registered_address": false,
                  "registered_address": "7th Floor, Sagar Tech Plaza, Andheri-Kurla Road",
                  "registered_city": "Mumbai",
                  "registered_state": "Maharashtra",
                  "registered_country": "India",
                  "registered_pincode": "400072",
                  "purpose_code": "P0101",
                  "hs_codes": [
                    "85234910",
                    "84715000"
                  ]
                },
                "settlement_details": {
                  "bank_account_number": "5087654321123456",
                  "bank_account_name": "Shakti Logistics & Exports Pvt Ltd",
                  "bank_swift_code": "HDFCINBBXXX",
                  "bank_name": "HDFC Bank Ltd.",
                  "bank_branch_name": "Andheri East Branch",
                  "bank_address": "Unit 3A, Ground Floor, Hiranandani Business Park, Powai",
                  "bank_city": "Mumbai",
                  "bank_state": "Maharashtra",
                  "bank_country": "India",
                  "bank_pincode": "400076",
                  "routing_number": "HDFC0000001"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Merchant updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMerchantResponse"
                },
                "example": {
                  "success": true,
                  "message": "Merchant updated successfully",
                  "data": {
                    "merchant_id": "3604346598",
                    "updated_fields": ["company_details", "settlement_details"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Merchant not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/partners/merchants/{merchant_id}/documents/": {
      "patch": {
        "summary": "Upload Merchant Document",
        "description": "Upload a document for a merchant.",
        "tags": ["Merchants"],
        "security": [
          { "clientAuth": [], "clientSecretAuth": [] }
        ],
        "parameters": [
          {
            "name": "merchant_id",
            "in": "path",
            "description": "The ID of the merchant to upload the document for.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Document upload request. The body must be multipart/form-data.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload."
                  },
                  "document_type": {
                    "type": "string",
                    "description": "Type of document (INVOICE). Only invoice is supported currently."
                  }
                },
                "required": ["file", "document_type"]
              },
              "example": {
                "document_type": "INVOICE",
                "file": "merchant_invoice_innovatetech_2024.pdf"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document uploaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "detail": { "type": "string" }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Invoice uploaded successfully",
                  "data": {
                    "detail": "Invoice uploaded successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pg/tokens/": {
      "post": {
        "summary": "Save Card",
        "description": "Save card details securely for future transactions. The card information is tokenized and stored securely.",
        "tags": ["Card Tokens"],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": [],
            "merchantAuth": []
          }
        ],
        "requestBody": {
          "description": "Card details to save",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveCardRequest"
              },
              "examples": {
                "MasterCard Example": {
                  "summary": "Saving a MasterCard",
                  "value": {
                    "identifier": "USER_PS_001",
                    "card_number": "5506900480000008",
                    "nickname": "HDFC Regalia Credit Card",
                    "cardholder_name": "Priya Sharma",
                    "expiry_month": 5,
                    "expiry_year": 2030,
                    "network": "MASTERCARD",
                    "card_type": "CREDIT",
                    "card_holder_consent": true
                  }
                },
                "Rupay Card Example": {
                  "summary": "Saving a Rupay card (requires authorization_reference_number)",
                  "value": {
                    "identifier": "USER_RP_002",
                    "card_number": "6521123456789012",
                    "nickname": "SBI RuPay Platinum Debit",
                    "cardholder_name": "Rajesh Patel",
                    "expiry_month": 6,
                    "expiry_year": 2031,
                    "network": "RUPAY",
                    "card_type": "DEBIT",
                    "card_holder_consent": true,
                    "authorization_reference_number": "AUTH_REF_SBI_789012345"
                  }
                },
                "AMEX Card Example": {
                  "summary": "Saving an AMEX card (requires authorization_reference_number with AEVV)",
                  "value": {
                    "identifier": "USER_SJ_003",
                    "card_number": "378282246310005",
                    "nickname": "AMEX Gold Business Card",
                    "cardholder_name": "Sanjana Joshi",
                    "expiry_month": 10,
                    "expiry_year": 2032,
                    "network": "AMEX",
                    "card_type": "CREDIT",
                    "card_holder_consent": true,
                    "authorization_reference_number": "AEVV_AMEX_ABC123DEF456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCardResponse"
                },
                "example": {
                  "success": true,
                  "message": "Card details saved successfully",
                  "data": {
                    "card_label": "HDFC Regalia Credit Card",
                    "card_token": "c8a28bca2021ead49124",
                    "issuer_token": null,
                    "network_token": "5506940089812197"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Missing Required Field": {
                    "summary": "Required field missing",
                    "value": {
                      "success": false,
                      "error": {
                        "type": "validation_error",
                        "errors": [
                          {
                            "code": "invalid",
                            "detail": "This field is required.",
                            "attr": "card_number"
                          }
                        ]
                      }
                    }
                  },
                  "Multiple Validation Errors": {
                    "summary": "Multiple field validation errors",
                    "value": {
                      "success": false,
                      "error": {
                        "type": "validation_error",
                        "errors": [
                          {
                            "code": "invalid",
                            "detail": "This field is required.",
                            "attr": "cardholder_name"
                          },
                          {
                            "code": "invalid",
                            "detail": "Invalid card number format.",
                            "attr": "card_number"
                          },
                          {
                            "code": "invalid",
                            "detail": "Consent must be true to save card details.",
                            "attr": "card_holder_consent"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Saved Cards",
        "description": "Retrieve a list of saved cards for a specific identifier. Returns tokenized card information without sensitive details.",
        "tags": ["Card Tokens"],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": [],
            "merchantAuth": []
          }
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "Unique identifier to filter saved cards",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "USER_AS_002"
          }
        ],
        "responses": {
          "200": {
            "description": "List of saved cards retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCardsResponse"
                },
                "example": {
                  "success": true,
                  "message": "Card details fetched successfully",
                  "data": [
                    {
                      "card_token": "1e6709282a21e83f43a020",
                      "identifier": "USER_AS_002",
                      "cardholder_name": "ARJUN SINGH",
                      "nickname": "HDFC Millennia Credit Card",
                      "card_type": "CREDIT",
                      "network": "VISA",
                      "masked_pan": "XXXXXXXXXXXX0003",
                      "expiry_month": 5,
                      "expiry_year": 2030
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pg/tokens/delete/": {
      "delete": {
        "summary": "Delete Saved Card",
        "description": "Delete a saved card token permanently. This action cannot be undone.",
        "tags": ["Card Tokens"],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": [],
            "merchantAuth": []
          }
        ],
        "requestBody": {
          "description": "Card token details to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCardRequest"
              },
              "example": {
                "card_token": "c8a28bca2021ead49124",
                "identifier": "USER_AS_002"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCardResponse"
                },
                "example": {
                  "success": true,
                  "message": "Card details deleted successfully",
                  "data": {}
                }
              }
            }
          },
          "404": {
            "description": "Card token not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateOrderRequest": {
        "type": "object",
        "required": [
          "amount",
          "currency",
          "reference_id",
          "buyer",
          "product"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount in decimal format (e.g., \"100.00\")",
            "pattern": "^\\d+\\.\\d{2}$"
          },
          "currency": {
            "type": "string",
            "description": "3-letter ISO currency code (e.g., INR, USD)",
            "pattern": "^[A-Z]{3}$"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique identifier for the order"
          },
          "return_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to redirect after payment"
          },
          "collection_mode": {
            "type": "string",
            "description": "Payment collection mode",
            "enum": [
              "hosted_payment",
              "s2s"
            ]
          },
          "mop_type": {
            "type": "string",
            "description": "Method of payment type (e.g., UPI)",
            "enum": [
              "UPI",
              "CREDIT_CARD",
              "NETBANKING",
              "DEBIT_CARD",
              "QR"
            ]
          },
          "upi_flow_type": {
            "type": "string",
            "description": "UPI flow type (required when collection_mode is s2s and mop_type is UPI)",
            "enum": [
              "intent",
              "collection"
            ]
          },
          "vpa": {
            "type": "string",
            "description": "Virtual Payment Address (required when upi_flow_type is collection)",
            "pattern": "^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+$"
          },
          "upi_app_name": {
            "type": "string",
            "description": "UPI app name (optional, defaults to 'others')",
            "enum": [
              "bhim",
              "paytm",
              "google_pay",
              "phonepe",
              "cred",
              "amazon_pay",
              "whatsapp",
              "others"
            ]
          },
          "buyer": {
            "$ref": "#/components/schemas/Buyer"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "invoice": {
            "$ref": "#/components/schemas/Invoice"
          },
          "card_details": {
            "$ref": "#/components/schemas/CardDetails"
          }
        }
      },
      "Buyer": {
        "type": "object",
        "required": [
          "name",
          "address"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Buyer's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Buyer's email address"
          },
          "phone": {
            "type": "string",
            "description": "Buyer's phone number with country code",
            "pattern": "^\\+[1-9]\\d{1,14}$"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "ip_address": {
            "type": "string",
            "description": "Buyer's IP address (required for card payments)"
          },
          "user_agent": {
            "type": "string",
            "description": "Buyer's browser user agent (required for card payments)"
          }
        }
      },
      "Address": {
        "type": "object",
        "required": [
          "line_1",
          "city",
          "state",
          "postal_code"
        ],
        "properties": {
          "line_1": {
            "type": "string",
            "description": "Address line 1"
          },
          "line_2": {
            "type": "string",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "description": "City name"
          },
          "state": {
            "type": "string",
            "description": "State name"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal/ZIP code"
          }
        }
      },
      "Product": {
        "type": "object",
        "required": [
          "name",
          "type_of_goods"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name"
          },
          "description": {
            "type": "string",
            "description": "Product description"
          },
          "hs_code": {
            "type": "string",
            "description": "Harmonized System code"
          },
          "hs_code_description": {
            "type": "string",
            "description": "Description of the HS code"
          },
          "type_of_goods": {
            "type": "string",
            "description": "Type of goods (e.g., goods)",
            "enum": [
              "goods",
              "services"
            ]
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Invoice number"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Invoice date in YYYY-MM-DD format"
          }
        }
      },
      "CardDetails": {
        "type": "object",
        "required": [
          "number",
          "cardholder_name",
          "expiry_month",
          "expiry_year",
          "cvv"
        ],
        "properties": {
          "nickname": {
            "type": "string",
            "description": "Card nickname for easy identification"
          },
          "number": {
            "type": "string",
            "description": "Card number (will be tokenized for security)",
            "pattern": "^[0-9]{13,19}$"
          },
          "cardholder_name": {
            "type": "string",
            "description": "Name on the card"
          },
          "expiry_month": {
            "type": "string",
            "description": "Card expiry month (MM format)",
            "pattern": "^(0[1-9]|1[0-2])$"
          },
          "expiry_year": {
            "type": "string",
            "description": "Card expiry year (YYYY format)",
            "pattern": "^[0-9]{4}$"
          },
          "cvv": {
            "type": "string",
            "description": "Card verification value",
            "pattern": "^[0-9]{3,4}$"
          },
          "network": {
            "type": "string",
            "description": "Card network (e.g., VISA, MASTERCARD)",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX",
              "DISCOVER",
              "RUPAY"
            ]
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier for the card"
          }
        }
      },
      "SaveCardRequest": {
        "type": "object",
        "required": [
          "identifier",
          "card_number",
          "cardholder_name",
          "expiry_month",
          "expiry_year",
          "network",
          "card_type",
          "card_holder_consent"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique identifier for the card owner"
          },
          "card_number": {
            "type": "string",
            "description": "Card number (will be tokenized and securely stored)",
            "pattern": "^[0-9]{13,19}$"
          },
          "nickname": {
            "type": "string",
            "description": "Card nickname for easy identification"
          },
          "cardholder_name": {
            "type": "string",
            "description": "Name on the card"
          },
          "expiry_month": {
            "type": "integer",
            "description": "Card expiry month (1-12)",
            "minimum": 1,
            "maximum": 12
          },
          "expiry_year": {
            "type": "integer",
            "description": "Card expiry year (YYYY format)",
            "minimum": 2024
          },
          "network": {
            "type": "string",
            "description": "Card network",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX",
              "DISCOVER",
              "RUPAY"
            ]
          },
          "card_type": {
            "type": "string",
            "description": "Type of card",
            "enum": [
              "CREDIT",
              "DEBIT",
              "PREPAID"
            ]
          },
          "card_holder_consent": {
            "type": "boolean",
            "description": "Confirmation that the card holder consents to saving card details"
          },
          "authorization_reference_number": {
            "type": "string",
            "description": "Conditional parameter required for specific card networks: For Rupay cards - the authorization reference number received during authorization call. For AMEX cards - the AEVV (American Express Verification Value) received during authorization call. This parameter is mandatory for Rupay and AMEX cards only."
          }
        }
      },
      "SaveCardResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "type": "object",
            "required": [
              "card_label",
              "card_token"
            ],
            "properties": {
              "card_label": {
                "type": "string",
                "description": "Display label for the saved card"
              },
              "card_token": {
                "type": "string",
                "description": "Unique token for the saved card"
              },
              "issuer_token": {
                "type": "string",
                "nullable": true,
                "description": "Issuer-specific token (if available)"
              },
              "network_token": {
                "type": "string",
                "description": "Network-specific token"
              }
            }
          }
        }
      },
      "ListCardsResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SavedCard"
            }
          }
        }
      },
      "SavedCard": {
        "type": "object",
        "required": [
          "card_token",
          "identifier",
          "cardholder_name",
          "card_type",
          "network",
          "masked_pan",
          "expiry_month",
          "expiry_year"
        ],
        "properties": {
          "card_token": {
            "type": "string",
            "description": "Unique token for the saved card"
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier for the card owner"
          },
          "cardholder_name": {
            "type": "string",
            "description": "Name on the card"
          },
          "nickname": {
            "type": "string",
            "description": "Card nickname"
          },
          "card_type": {
            "type": "string",
            "description": "Type of card",
            "enum": [
              "CREDIT",
              "DEBIT",
              "PREPAID"
            ]
          },
          "network": {
            "type": "string",
            "description": "Card network",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX",
              "DISCOVER",
              "RUPAY"
            ]
          },
          "masked_pan": {
            "type": "string",
            "description": "Masked card number for display purposes",
            "pattern": "^X{8,15}[0-9]{4}$"
          },
          "expiry_month": {
            "type": "integer",
            "description": "Card expiry month (1-12)",
            "minimum": 1,
            "maximum": 12
          },
          "expiry_year": {
            "type": "integer",
            "description": "Card expiry year",
            "minimum": 2024
          }
        }
      },
      "DeleteCardRequest": {
        "type": "object",
        "required": [
          "card_token",
          "identifier"
        ],
        "properties": {
          "card_token": {
            "type": "string",
            "description": "Token of the card to delete"
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier for the card owner"
          }
        }
      },
      "DeleteCardResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "type": "object",
            "description": "Empty object confirming deletion"
          }
        }
      },
      "CreateOrderResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "$ref": "#/components/schemas/OrderData"
          }
        }
      },
      "OrderData": {
        "type": "object",
        "required": [
          "order_id"
        ],
        "properties": {
          "session_id": {
            "type": "string",
            "description": "Unique session identifier for payment processing (for hosted payment mode)"
          },
          "order_id": {
            "type": "string",
            "description": "Unique order identifier"
          },
          "intent_uri": {
            "type": "string",
            "description": "UPI intent URI for direct app opening (for S2S UPI Intent mode)"
          },
          "message": {
            "type": "string",
            "description": "Status message (for S2S UPI Collection mode)"
          },
          "acs_template": {
            "type": "string",
            "description": "Base64-encoded HTML template for 3D Secure authentication (for S2S Card Payment mode)"
          }
        }
      },
      "OrderDetails": {
        "type": "object",
        "required": [
          "order_id",
          "reference_id",
          "amount",
          "currency",
          "status",
          "created_at"
        ],
        "properties": {
          "order_id": {
            "type": "string",
            "description": "Unique order identifier"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique reference identifier for the order"
          },
          "amount": {
            "type": "number",
            "description": "Order amount"
          },
          "currency": {
            "type": "string",
            "description": "3-letter ISO currency code"
          },
          "mop_type": {
            "type": "string",
            "description": "Method of payment type",
            "enum": [
              "UPI",
              "CREDIT_CARD",
              "NETBANKING",
              "DEBIT_CARD",
              "QR"
            ]
          },
          "buyer": {
            "type": "object",
            "required": [
              "name",
              "address"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Buyer's full name"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Buyer's email address"
              },
              "phone": {
                "type": "string",
                "description": "Buyer's phone number with country code"
              },
              "address": {
                "$ref": "#/components/schemas/Address"
              },
              "pan_number": {
                "type": "string",
                "nullable": true,
                "description": "Buyer's PAN number"
              },
              "dob": {
                "type": "string",
                "format": "date",
                "nullable": true,
                "description": "Buyer's date of birth"
              }
            }
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "invoice": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "Invoice number"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Invoice date in YYYY-MM-DD format"
              },
              "file": {
                "type": "string",
                "nullable": true,
                "description": "Invoice file URL"
              }
            }
          },
          "air_waybills": {
            "type": "array",
            "description": "Array of air waybill information",
            "items": {
              "type": "object",
              "properties": {
                "number": {
                  "type": "string",
                  "description": "Air waybill number"
                },
                "file": {
                  "type": "string",
                  "description": "Air waybill file URL"
                }
              }
            }
          },
          "payments": {
            "type": "array",
            "description": "Array of payment request information",
            "items": {
              "$ref": "#/components/schemas/PaymentRequest"
            }
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "enum": [
              "PAYMENT_PENDING",
              "PAYMENT_SUCCESSFUL",
              "FAILED"
            ]
          },
          "status_message": {
            "type": "string",
            "nullable": true,
            "description": "Order status message"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Order creation timestamp"
          },
          "is_testing": {
            "type": "boolean",
            "description": "Whether this is a test order"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "success",
          "error"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "error": {
            "$ref": "#/components/schemas/ErrorDetails"
          }
        }
      },
      "ErrorDetails": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code (e.g., ERR_ORDER_002)"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "object",
            "description": "Detailed validation error information with field-specific errors",
            "additionalProperties": {
              "type": "string",
              "description": "Error message for the specific field"
            }
          }
        }
      },
      "GetOrderResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "$ref": "#/components/schemas/OrderDetails"
          }
        }
      },
    "UpdateOrderRequest": {
        "type": "object",
        "description": "Request body for updating order - only include fields to update",
        "properties": {
          "buyer": {
            "type": "object",
            "description": "Buyer information to update",
            "properties": {
              "pan_number": {
                "type": "string",
                "description": "Buyer's PAN number"
              },
              "dob": {
                "type": "string",
                "format": "date",
                "description": "Buyer's date of birth (YYYY-MM-DD)"
              }
            }
          },
          "invoice": {
            "type": "object",
            "description": "Invoice information to update",
            "properties": {
              "number": {
                "type": "string",
                "description": "Invoice number"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Invoice date (YYYY-MM-DD)"
              }
            }
          }
        }
      },
      "UpdateOrderResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "type": "object",
            "description": "Nested response data",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Indicates if the order update was successful"
              },
              "message": {
                "type": "string",
                "description": "Success message for the order update"
              },
              "data": {
                "type": "object",
                "description": "Contains the updated order fields",
                "properties": {
                  "order_id": {
                    "type": "string",
                    "description": "The ID of the updated order"
                  },
                  "buyer": {
                    "type": "object",
                    "description": "Updated buyer information",
                    "properties": {
                      "pan_number": {
                        "type": "string",
                        "description": "Updated PAN number"
                      },
                      "dob": {
                        "type": "string",
                        "format": "date",
                        "description": "Updated date of birth"
                      }
                    }
                  },
                  "invoice": {
                    "type": "object",
                    "description": "Updated invoice information",
                    "properties": {
                      "number": {
                        "type": "string",
                        "description": "Updated invoice number"
                      },
                      "date": {
                        "type": "string",
                        "format": "date",
                        "description": "Updated invoice date"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UploadDocumentRequest": {
        "type": "object",
        "required": [
          "identifier",
          "document_type",
          "file"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier for the document (e.g., order ID)"
          },
          "document_type": {
            "type": "string",
            "description": "Type of document invoice or awb"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The file to upload"
          }
        }
      },
      "UploadDocumentResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the document upload was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "$ref": "#/components/schemas/OrderDetails"
          }
        }
      },
      "ListPaymentsResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "type": "object",
            "required": [
              "count",
              "page",
              "page_size",
              "next",
              "previous",
              "results"
            ],
            "properties": {
              "count": {
                "type": "integer",
                "description": "Total number of payments"
              },
              "page": {
                "type": "integer",
                "description": "Current page number"
              },
              "page_size": {
                "type": "integer",
                "description": "Number of payments per page"
              },
              "next": {
                "type": "string",
                "nullable": true,
                "description": "URL for the next page of results"
              },
              "previous": {
                "type": "string",
                "nullable": true,
                "description": "URL for the previous page of results"
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentInList"
                }
              }
            }
          }
        }
      },
      "PaymentInList": {
        "type": "object",
        "required": [
          "id",
          "merchant",
          "reference_id",
          "buyer",
          "payment_id",
          "amount",
          "created_at",
          "mop_type",
          "status"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique payment request identifier"
          },
          "merchant": {
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Merchant ID"
              },
              "name": {
                "type": "string",
                "description": "Merchant name"
              }
            }
          },
          "reference_id": {
            "type": "string",
            "description": "Order reference identifier"
          },
          "buyer": {
            "type": "object",
            "required": [
              "name",
              "email",
              "phone"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Buyer's full name"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Buyer's email address"
              },
              "phone": {
                "type": "string",
                "description": "Buyer's phone number with country code"
              }
            }
          },
          "amount": {
            "type": "object",
            "required": [
              "amount",
              "total_amount",
              "currency"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Payment amount"
              },
              "total_amount": {
                "type": "string",
                "description": "Total payment amount"
              },
              "currency": {
                "type": "string",
                "description": "3-letter ISO currency code"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Payment creation timestamp"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Additional comment or status message"
          },
          "mop_type": {
            "type": "string",
            "description": "Method of payment",
            "enum": [
              "UPI",
              "CREDIT_CARD",
              "DEBIT_CARD",
              "NET_BANKING",
              "QR"
            ]
          },
          "status": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "PENDING",
              "CAPTURED",
              "FAILED"
            ]
          }
        }
      },
      "GetPaymentResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "$ref": "#/components/schemas/Payment"
          }
        }
      },
      "CreateRefundRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "refund_amount"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The ID of the payment to refund."
          },
          "refund_amount": {
            "type": "string",
            "description": "The amount to be refunded. Can be a partial amount."
          }
        }
      },
      "GetRefundResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "$ref": "#/components/schemas/Refund"
          }
        }
      },
      "Refund": {
        "type": "object",
        "properties": {
          "refund_id": {
            "type": "string",
            "description": "Unique identifier for the refund."
          },
          "payment_id": {
            "type": "string",
            "description": "The ID of the payment that was refunded."
          },
          "refund_status": {
            "type": "string",
            "description": "The status of the refund."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "A message providing more detail about the refund status."
          },
          "bank_ref_num": {
            "type": "string",
            "nullable": true,
            "description": "The bank reference number for the refund."
          },
          "refund_amount": {
            "type": "number",
            "format": "float",
            "description": "The refunded amount."
          },
          "refunded_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The timestamp of when the refund was completed."
          }
        }
      },
      "ListRefundsResponse": {
        "type": "object",
        "required": [
          "count",
          "page",
          "page_size",
          "next",
          "previous",
          "results"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of refunds"
          },
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "page_size": {
            "type": "integer",
            "description": "Number of refunds per page"
          },
          "next": {
            "type": "string",
            "nullable": true,
            "description": "URL for the next page of results"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "description": "URL for the previous page of results"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundInList"
            }
          }
        }
      },
      "RefundInList": {
        "type": "object",
        "required": [
          "refund_id",
          "refund_amount",
          "refund_status",
          "refunded_at",
          "message",
          "payment_id"
        ],
        "properties": {
          "refund_id": {
            "type": "string",
            "description": "Unique identifier for the refund."
          },
          "refund_amount": {
            "type": "number",
            "format": "float",
            "description": "The refunded amount."
          },
          "refund_status": {
            "type": "string",
            "description": "The status of the refund."
          },
          "refunded_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The timestamp of when the refund was completed."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "A message providing more detail about the refund status."
          },
          "payment_id": {
            "type": "string",
            "description": "The ID of the payment that was refunded."
          }
        }
      },
      "Settlement": {
        "type": "object",
        "properties": {
          "settlement_id": {
            "type": "string",
            "description": "Unique identifier for the settlement."
          },
          "utr_number": {
            "type": "string",
            "description": "UTR (Unique Transaction Reference) number for the settlement."
          },
          "settlement_completed_date": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of when the settlement was completed."
          },
          "forex_rate_cents": {
            "type": "integer",
            "description": "Forex rate in cents (e.g., 8600 represents 86.00)."
          },
          "settlement_amount_cents": {
            "type": "integer",
            "description": "Settlement amount in cents (e.g., 100000 represents 1000.00)."
          },
          "settlement_currency": {
            "type": "string",
            "description": "Currency code for the settlement amount."
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettlementTransaction"
            }
          }
        }
      },
      "SettlementTransaction": {
        "type": "object",
        "properties": {
          "settlement_type": {
            "type": "string",
            "description": "Type of settlement transaction (e.g., capture, refund)"
          },
          "transaction_id": {
            "type": "string",
            "description": "Unique identifier for the transaction"
          },
          "transaction_amount": {
            "type": "number",
            "format": "float",
            "description": "Transaction amount"
          },
          "merchant_service_fee": {
            "type": "number",
            "format": "float",
            "description": "Merchant service fee"
          },
          "merchant_service_tax": {
            "type": "number",
            "format": "float",
            "description": "Merchant service tax"
          },
          "merchant_net_amount": {
            "type": "number",
            "format": "float",
            "description": "Net amount for merchant"
          },
          "mop_type": {
            "type": "string",
            "description": "Method of payment type",
            "enum": [
              "UPI",
              "CREDIT_CARD",
              "DEBIT_CARD",
              "NET_BANKING",
              "QR"
            ]
          },
          "transaction_currency": {
            "type": "string",
            "description": "Currency of the transaction"
          },
          "forex_rate": {
            "type": "number",
            "format": "float",
            "description": "Forex rate applied to the transaction"
          }
        }
      },
      "SettlementInList": {
        "type": "object",
        "properties": {
          "settlement_id": {
            "type": "string"
          },
          "utr_number": {
            "type": "string"
          },
          "settlement_completed_date": {
            "type": "string",
            "format": "date-time"
          },
          "forex_rate": {
            "type": "number",
            "format": "float"
          },
          "settlement_amount": {
            "type": "number",
            "format": "float"
          },
          "settlement_currency": {
            "type": "string"
          }
        }
      },
      "GetSettlementResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Settlement"
          }
        }
      },
      "ListSettlementsResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettlementInList"
            }
          }
        }
      },
      "CreateMerchantRequest": {
        "type": "object",
        "required": [
          "settlement_details",
          "company_details"
        ],
        "properties": {
          "settlement_details": {
            "$ref": "#/components/schemas/SettlementDetails"
          },
          "company_details": {
            "$ref": "#/components/schemas/CompanyDetails"
          }
        }
      },
      "SettlementDetails": {
        "type": "object",
        "required": [
          "bank_account_number",
          "bank_account_name",
          "bank_swift_code",
          "bank_name",
          "bank_branch_name",
          "bank_address",
          "bank_city",
          "bank_state",
          "bank_country",
          "bank_pincode",
          "routing_number"
        ],
        "properties": {
          "bank_account_number": {
            "type": "string",
            "description": "Bank account number"
          },
          "bank_account_name": {
            "type": "string",
            "description": "Name on the bank account"
          },
          "bank_swift_code": {
            "type": "string",
            "description": "Bank SWIFT/BIC code"
          },
          "bank_name": {
            "type": "string",
            "description": "Name of the bank"
          },
          "bank_branch_name": {
            "type": "string",
            "description": "Bank branch name"
          },
          "bank_address": {
            "type": "string",
            "description": "Bank address"
          },
          "bank_city": {
            "type": "string",
            "description": "Bank city"
          },
          "bank_state": {
            "type": "string",
            "description": "Bank state"
          },
          "bank_country": {
            "type": "string",
            "description": "Bank country"
          },
          "bank_pincode": {
            "type": "string",
            "description": "Bank pincode/postal code"
          },
          "routing_number": {
            "type": "string",
            "description": "Bank routing number"
          }
        }
      },
      "CompanyDetails": {
        "type": "object",
        "required": [
          "legal_name",
          "brand_name",
          "registration_number",
          "international_org_type",
          "tax_id",
          "website",
          "monthly_avg_transaction_value",
          "monthly_avg_transaction_volume",
          "communication_address",
          "communication_city",
          "communication_state",
          "communication_country",
          "communication_pincode",
          "same_as_registered_address",
          "registered_address",
          "registered_city",
          "registered_state",
          "registered_country",
          "registered_pincode",
          "business_category",
          "business_mode",
          "commodity",
          "payment_terms",
          "hs_codes",
          "category",
          "description_of_products_and_services",
          "agreement_details",
          "purpose_code"
        ],
        "properties": {
          "legal_name": {
            "type": "string",
            "description": "Legal name of the company"
          },
          "brand_name": {
            "type": "string",
            "description": "Brand/trading name of the company"
          },
          "registration_number": {
            "type": "string",
            "description": "Company registration number"
          },
          "international_org_type": {
            "type": "string",
            "description": "Type of international organization",
            "enum": [
              "PRIVATE_LIMITED",
              "PUBLIC_LIMITED",
              "PARTNERSHIP",
              "SOLE_PROPRIETORSHIP",
              "LLC",
              "CORPORATION"
            ]
          },
          "tax_id": {
            "type": "string",
            "description": "Tax identification number"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "description": "Company website URL"
          },
          "monthly_avg_transaction_value": {
            "type": "string",
            "description": "Average monthly transaction value"
          },
          "monthly_avg_transaction_volume": {
            "type": "string",
            "description": "Average monthly transaction volume"
          },
          "communication_address": {
            "type": "string",
            "description": "Communication address"
          },
          "communication_city": {
            "type": "string",
            "description": "Communication city"
          },
          "communication_state": {
            "type": "string",
            "description": "Communication state"
          },
          "communication_country": {
            "type": "string",
            "description": "Communication country"
          },
          "communication_pincode": {
            "type": "string",
            "description": "Communication pincode/postal code"
          },
          "same_as_registered_address": {
            "type": "boolean",
            "description": "Whether communication address is same as registered address"
          },
          "registered_address": {
            "type": "string",
            "description": "Registered address"
          },
          "registered_city": {
            "type": "string",
            "description": "Registered city"
          },
          "registered_state": {
            "type": "string",
            "description": "Registered state"
          },
          "registered_country": {
            "type": "string",
            "description": "Registered country"
          },
          "registered_pincode": {
            "type": "string",
            "description": "Registered pincode/postal code"
          },
          "business_category": {
            "type": "string",
            "description": "Business category",
            "enum": [
              "TECHNOLOGY",
              "HEALTHCARE",
              "FINANCE",
              "RETAIL",
              "MANUFACTURING",
              "EDUCATION",
              "ENTERTAINMENT",
              "OTHER"
            ]
          },
          "business_mode": {
            "type": "string",
            "description": "Business mode",
            "enum": [
              "B2B",
              "B2C",
              "B2B2C"
            ]
          },
          "commodity": {
            "type": "string",
            "description": "Primary commodity or service"
          },
          "payment_terms": {
            "type": "string",
            "description": "Payment terms",
            "enum": [
              "NET_30",
              "NET_60",
              "NET_90",
              "IMMEDIATE"
            ]
          },
          "hs_codes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Harmonized System codes for products/services"
          },
          "category": {
            "type": "string",
            "description": "Business category description"
          },
          "description_of_products_and_services": {
            "type": "string",
            "description": "Detailed description of products and services"
          },
          "agreement_details": {
            "type": "string",
            "description": "Agreement details"
          },
          "purpose_code": {
            "type": "string",
            "description": "Purpose code for international transactions"
          }
        }
      },
      "CreateMerchantResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "$ref": "#/components/schemas/MerchantDetails"
          }
        }
      },
      "ListMerchantsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              },
              "page": {
                "type": "integer"
              },
              "page_size": {
                "type": "integer"
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantInList"
                }
              }
            }
          }
        }
      },
      "MerchantInList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique merchant identifier"
          },
          "brand_name": {
            "type": "string",
            "description": "Brand/trading name of the merchant"
          },
          "kyc_status": {
            "type": "string",
            "description": "KYC verification status",
            "enum": [
              "PENDING",
              "APPROVED",
              "REJECTED"
            ]
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "description": "Merchant creation timestamp"
          }
        }
      },
      "GetMerchantResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/MerchantDetails"
          }
        }
      },
      "MerchantDetails": {
        "type": "object",
        "required": [
          "id",
          "settlement_details",
          "created_at",
          "updated_at",
          "invoice_file",
          "company_details"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique merchant identifier"
          },
          "settlement_details": {
            "$ref": "#/components/schemas/SettlementDetails"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Merchant creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Merchant update timestamp"
          },
          "invoice_file": {
            "type": "string",
            "description": "Invoice file URL"
          },
          "company_details": {
            "$ref": "#/components/schemas/CompanyDetails"
          }
        }
      },
      "UpdateMerchantRequest": {
        "type": "object",
        "description": "Request body for updating merchant - only include fields to update",
        "properties": {
          "company_details": {
            "type": "object",
            "description": "Company details to update",
            "properties": {
              "legal_name": {
                "type": "string",
                "description": "Updated legal name of the company"
              },
              "brand_name": {
                "type": "string",
                "description": "Updated brand/trading name of the company"
              },
              "registration_number": {
                "type": "string",
                "description": "Updated company registration number"
              },
              "international_org_type": {
                "type": "string",
                "description": "Updated type of international organization",
                "enum": [
                  "PRIVATE_LIMITED",
                  "PUBLIC_LIMITED",
                  "PARTNERSHIP",
                  "SOLE_PROPRIETORSHIP",
                  "LLC",
                  "CORPORATION"
                ]
              },
              "tax_id": {
                "type": "string",
                "description": "Updated tax identification number"
              },
              "website": {
                "type": "string",
                "format": "uri",
                "description": "Updated company website URL"
              },
              "monthly_avg_transaction_value": {
                "type": "string",
                "description": "Updated average monthly transaction value"
              },
              "monthly_avg_transaction_volume": {
                "type": "string",
                "description": "Updated average monthly transaction volume"
              },
              "communication_address": {
                "type": "string",
                "description": "Updated communication address"
              },
              "communication_city": {
                "type": "string",
                "description": "Updated communication city"
              },
              "communication_state": {
                "type": "string",
                "description": "Updated communication state"
              },
              "communication_country": {
                "type": "string",
                "description": "Updated communication country"
              },
              "communication_pincode": {
                "type": "string",
                "description": "Updated communication pincode/postal code"
              },
              "same_as_registered_address": {
                "type": "boolean",
                "description": "Updated flag for same as registered address"
              },
              "registered_address": {
                "type": "string",
                "description": "Updated registered address"
              },
              "registered_city": {
                "type": "string",
                "description": "Updated registered city"
              },
              "registered_state": {
                "type": "string",
                "description": "Updated registered state"
              },
              "registered_country": {
                "type": "string",
                "description": "Updated registered country"
              },
              "registered_pincode": {
                "type": "string",
                "description": "Updated registered pincode/postal code"
              },
              "business_category": {
                "type": "string",
                "description": "Updated business category",
                "enum": [
                  "TECHNOLOGY",
                  "HEALTHCARE",
                  "FINANCE",
                  "RETAIL",
                  "MANUFACTURING",
                  "EDUCATION",
                  "ENTERTAINMENT",
                  "OTHER"
                ]
              },
              "business_mode": {
                "type": "string",
                "description": "Updated business mode",
                "enum": [
                  "B2B",
                  "B2C",
                  "B2B2C"
                ]
              },
              "commodity": {
                "type": "string",
                "description": "Updated primary commodity or service"
              },
              "payment_terms": {
                "type": "string",
                "description": "Updated payment terms",
                "enum": [
                  "NET_30",
                  "NET_60",
                  "NET_90",
                  "IMMEDIATE"
                ]
              },
              "hs_codes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Updated Harmonized System codes for products/services"
              },
              "category": {
                "type": "string",
                "description": "Updated business category description"
              },
              "description_of_products_and_services": {
                "type": "string",
                "description": "Updated description of products and services"
              },
              "agreement_details": {
                "type": "string",
                "description": "Updated agreement details"
              },
              "purpose_code": {
                "type": "string",
                "description": "Updated purpose code for international transactions"
              }
            }
          },
          "settlement_details": {
            "type": "object",
            "description": "Settlement details to update",
            "properties": {
              "bank_account_number": {
                "type": "string",
                "description": "Updated bank account number"
              },
              "bank_account_name": {
                "type": "string",
                "description": "Updated bank account name"
              },
              "bank_swift_code": {
                "type": "string",
                "description": "Updated bank SWIFT/BIC code"
              },
              "bank_name": {
                "type": "string",
                "description": "Updated name of the bank"
              },
              "bank_branch_name": {
                "type": "string",
                "description": "Updated bank branch name"
              },
              "bank_address": {
                "type": "string",
                "description": "Updated bank address"
              },
              "bank_city": {
                "type": "string",
                "description": "Updated bank city"
              },
              "bank_state": {
                "type": "string",
                "description": "Updated bank state"
              },
              "bank_country": {
                "type": "string",
                "description": "Updated bank country"
              },
              "bank_pincode": {
                "type": "string",
                "description": "Updated bank pincode/postal code"
              },
              "routing_number": {
                "type": "string",
                "description": "Updated bank routing number"
              }
            }
          }
        }
      },
      "UpdateMerchantResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "type": "object",
            "description": "Contains the updated merchant fields",
            "properties": {
              "merchant_id": {
                "type": "string",
                "description": "The ID of the updated merchant"
              },
              "updated_fields": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PaymentRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "mop_type",
          "status",
          "created_at"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Payment request ID"
          },
          "mop_type": {
            "type": "string",
            "description": "Method of payment type",
            "enum": [
              "UPI",
              "CREDIT_CARD",
              "NETBANKING",
              "DEBIT_CARD",
              "QR"
            ]
          },
          "status": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "pending",
              "captured",
              "failed",
              "cancelled"
            ]
          },
          "status_message": {
            "type": "string",
            "nullable": true,
            "description": "Payment status message"
          },
          "settlement": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Settlement status",
                "enum": [
                  "pending",
                  "ready_for_settlement",
                  "settled",
                  "failed"
                ]
              },
              "message": {
                "type": "string",
                "nullable": true,
                "description": "Settlement message"
              },
              "settlement_details": {
                "type": "object",
                "nullable": true,
                "description": "Settlement details"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Payment request creation timestamp"
          }
        }
      },
      "Payment": {
        "type": "object",
        "required": [
          "payment_id",
          "order",
          "settlement",
          "refund",
          "collection_mode",
          "mop_type",
          "status",
          "created_date"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique payment request identifier"
          },
          "order": {
            "type": "object",
            "required": [
              "order_id",
              "reference_id",
              "amount",
              "currency",
              "status",
              "created_at"
            ],
            "properties": {
              "order_id": {
                "type": "string",
                "description": "Unique order identifier"
              },
              "reference_id": {
                "type": "string",
                "description": "Order reference identifier"
              },
              "amount": {
                "type": "number",
                "format": "float",
                "description": "Order amount"
              },
              "currency": {
                "type": "string",
                "description": "3-letter ISO currency code"
              },
              "mop_type": {
                "type": "string",
                "description": "Method of payment type",
                "enum": [
                  "UPI",
                  "CREDIT_CARD",
                  "NETBANKING",
                  "DEBIT_CARD",
                  "QR"
                ]
              },
              "buyer": {
                "type": "object",
                "required": [
                  "name",
                  "address"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Buyer's full name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Buyer's email address"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Buyer's phone number with country code"
                  },
                  "address": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "pan_number": {
                    "type": "string",
                    "nullable": true,
                    "description": "Buyer's PAN number"
                  },
                  "dob": {
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "description": "Buyer's date of birth"
                  }
                }
              },
              "product": {
                "$ref": "#/components/schemas/Product"
              },
              "status": {
                "type": "string",
                "description": "Order status",
                "enum": [
                  "PAYMENT_PENDING",
                  "PAYMENT_SUCCESSFUL",
                  "FAILED"
                ]
              },
              "status_message": {
                "type": "string",
                "nullable": true,
                "description": "Order status message"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Order creation timestamp"
              }
            }
          },
          "settlement": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "description": "Settlement ID"
              },
              "settlement_id": {
                "type": "string",
                "description": "Unique settlement identifier"
              },
              "settlement_completed_date": {
                "type": "string",
                "format": "date-time",
                "description": "Settlement completion timestamp"
              },
              "settlement_amount": {
                "type": "number",
                "format": "float",
                "description": "Settlement amount"
              },
              "settlement_currency": {
                "type": "string",
                "description": "Settlement currency"
              },
              "utr_number": {
                "type": "string",
                "description": "UTR number for the settlement"
              },
              "number_of_transactions": {
                "type": "integer",
                "description": "Number of transactions in settlement"
              },
              "created_date": {
                "type": "string",
                "format": "date-time",
                "description": "Settlement creation timestamp"
              }
            }
          },
          "refund": {
            "type": "array",
            "description": "Array of refunds associated with this payment",
            "items": {
              "$ref": "#/components/schemas/Refund"
            }
          },
          "collection_mode": {
            "type": "string",
            "description": "Payment collection mode",
            "enum": [
              "HOSTED_PAYMENT",
              "DIRECT_PAYMENT"
            ]
          },
          "mop_type": {
            "type": "string",
            "description": "Method of payment",
            "enum": [
              "UPI",
              "CREDIT_CARD",
              "DEBIT_CARD",
              "NET_BANKING",
              "QR"
            ]
          },
          "bank_ref_num": {
            "type": "string",
            "nullable": true,
            "description": "Bank reference number"
          },
          "mop_detail": {
            "type": "object",
            "nullable": true,
            "description": "Method of payment specific details - structure varies based on mop_type",
            "oneOf": [
              {
                "title": "UPI Details",
                "type": "object",
                "properties": {
                  "upi_id": {
                    "type": "string",
                    "description": "UPI ID for UPI payments"
                  }
                },
                "required": ["upi_id"]
              },
              {
                "title": "Card Details",
                "type": "object",
                "properties": {
                  "card_mask": {
                    "type": "string",
                    "description": "Masked card number"
                  },
                  "card_holder_name": {
                    "type": "string",
                    "description": "Name of the card holder"
                  },
                  "card_issuer_country": {
                    "type": "string",
                    "description": "Country of the card issuer"
                  },
                  "card_issuer_bank": {
                    "type": "string",
                    "description": "Bank that issued the card"
                  }
                },
                "required": ["card_mask", "card_holder_name", "card_issuer_country", "card_issuer_bank"]
              },
              {
                "title": "Net Banking Details",
                "type": "object",
                "properties": {
                  "bank_ref_num": {
                    "type": "string",
                    "description": "Bank reference number"
                  },
                  "acq_id": {
                    "type": "string",
                    "description": "Acquirer ID"
                  }
                },
                "required": ["bank_ref_num", "acq_id"]
              }
            ]
          },
          "payment_completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Payment completion timestamp"
          },
          "status": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "PENDING",
              "CAPTURED",
              "FAILED"
            ]
          },
          "status_message": {
            "type": "string",
            "nullable": true,
            "description": "Payment status message"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "description": "Payment creation timestamp"
          }
        }
      }
    },
    "securitySchemes": {
  "clientAuth": {
    "type": "apiKey",
    "name": "X-Client-ID",
    "in": "header",
    "description": "Client app ID. You can find your app id in the merchant dashboard."
  },
  "clientSecretAuth": {
    "type": "apiKey",
    "name": "X-Client-Secret",
    "in": "header",
    "description": "Client secret key. You can find your secret in the merchant dashboard."
  },
  "merchantAuth": {
    "type": "apiKey",
    "name": "X-Merchant-ID",
    "in": "header",
    "description": "Merchant ID. You can find your merchant ID in the merchant section of the merchant dashboard."
  }
}
  }
}